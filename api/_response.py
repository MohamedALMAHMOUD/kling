"""
Base response models for Kling API callbacks.
"""
from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Protocol, runtime_checkable

from pydantic import BaseModel, Field


class TaskStatus(str, Enum):
    """Status of an asynchronous task."""
    SUBMITTED = "submitted"
    PROCESSING = "processing"
    SUCCEEDED = "succeed"
    FAILED = "failed"


class TaskImageResult(BaseModel):
    """Result for a generated image."""
    index: int = Field(..., description="Image number")
    url: str = Field(..., description="URL to the generated image")


class TaskVideoResult(BaseModel):
    """Result for a generated video."""
    id: str = Field(..., description="Generated video ID; globally unique")
    url: str = Field(..., description="URL to the generated video")
    duration: str = Field(..., description="Total video duration in seconds")


class TaskResult(BaseModel):
    """Result data for a completed task."""
    images: list[TaskImageResult] | None = Field(
        None, description="List of generated images"
    )
    videos: list[TaskVideoResult] | None = Field(
        None, description="List of generated videos"
    )


class TaskInfo(BaseModel):
    """Information about the task creation parameters."""
    parent_video: dict[str, Any] | None = Field(
        None, description="Parent video information"
    )
    external_task_id: str | None = Field(
        None, description="Customer-defined task ID"
    )


class TaskCallback(BaseModel):
    """Callback payload for task status updates.
    
    This is sent to the callback URL when a task's status changes.
    """
    task_id: str = Field(..., description="Task ID, generated by the system")
    task_status: TaskStatus = Field(..., description="Current status of the task")
    task_status_msg: str | None = Field(
        None, description="Status message, shows failure reason if task failed"
    )
    created_at: int = Field(..., description="Task creation time, Unix timestamp in ms")
    updated_at: int = Field(..., description="Task update time, Unix timestamp in ms")
    task_info: TaskInfo | None = Field(
        None, description="Task creation parameters provided by the user"
    )
    task_result: TaskResult | None = Field(
        None, description="Task result data"
    )

    @property
    def created_dt(self) -> datetime:
        """Get created_at as a datetime object."""
        return datetime.fromtimestamp(self.created_at / 1000)

    @property
    def updated_dt(self) -> datetime:
        """Get updated_at as a datetime object."""
        return datetime.fromtimestamp(self.updated_at / 1000)


@runtime_checkable
class TaskListQueryCallback(Protocol):
    """Protocol for handling task list query callbacks.

    This defines the interface that callback handlers should implement.
    """

    def __call__(self, task: TaskCallback) -> None:
        """Handle a task status update.

        Args:
            task: The task status update data.
        """
        ...
class BaseResponse(BaseModel):
    """Base response model for all API responses."""
    code: int = Field(..., description="Error code")
    message: str = Field(..., description="Error message")
    request_id: str = Field(..., description="Request ID for tracking")
