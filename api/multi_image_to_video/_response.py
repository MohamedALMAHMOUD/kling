"""
Response models for Kling AI Multi-Image to Video API.
"""
from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Field, HttpUrl


class TaskStatus(str, Enum):
    """Status of a video generation task."""
    SUBMITTED = "submitted"
    PROCESSING = "processing"
    SUCCEED = "succeed"
    FAILED = "failed"


class VideoInfo(BaseModel):
    """Information about a generated video."""
    id: str = Field(..., description="Generated video ID; globally unique")
    url: HttpUrl = Field(..., description="URL for the generated video")
    duration: float = Field(..., description="Total video duration in seconds")


class TaskInfo(BaseModel):
    """Information about a video generation task."""
    external_task_id: str | None = Field(
        None,
        description="Custom task ID provided during task creation"
    )


class TaskResult(BaseModel):
    """Result of a video generation task."""
    videos: list[VideoInfo] = Field(
        ...,
        description="List of generated videos"
    )


class TaskResponse(BaseModel):
    """Response model for a video generation task."""
    task_id: str = Field(..., description="Task ID generated by the system")
    task_status: TaskStatus = Field(..., description="Current status of the task")
    task_status_msg: str | None = Field(
        None,
        description="Status message, especially useful for failure cases"
    )
    task_info: TaskInfo = Field(..., description="Task creation parameters")
    created_at: int = Field(..., description="Task creation timestamp in milliseconds")
    updated_at: int = Field(..., description="Task last update timestamp in milliseconds")
    task_result: TaskResult | None = Field(
        None,
        description="Task result, available when task is completed"
    )

    @property
    def is_completed(self) -> bool:
        """Check if the task has completed (successfully or not)."""
        return self.task_status in (TaskStatus.SUCCEED, TaskStatus.FAILED)

    @property
    def is_successful(self) -> bool:
        """Check if the task completed successfully."""
        return self.task_status == TaskStatus.SUCCEED


class TaskListResponse(BaseModel):
    """Response model for listing tasks."""
    code: int = Field(..., description="Error code (0 for success)")
    message: str = Field(..., description="Error message")
    request_id: str = Field(..., description="Request ID for tracking")
    data: list[TaskResponse] = Field(..., description="List of task responses")